extern crate num;

#[macro_use]
extern crate static_fir;

use num::complex::Complex32;

// FIR filter approximating the frequency response of the "Nyquist Raised Cosine"
// impulse shaping filter described in the P25 standard.
impl_fir!(RaisedCosineFir, f32, 121, [
    -0.0000000000000000,
    -0.0002914178875877,
    -0.0006110820215192,
    -0.0009237061350181,
    -0.0011884933789757,
    -0.0013635438839528,
    -0.0014110552136596,
    -0.0013027556276180,
    -0.0010249119463935,
    -0.0005822273129838,
    0.0000000000000000,
    0.0006759457825454,
    0.0013818309223325,
    0.0020409960801970,
    0.0025711800935818,
    0.0028934041068590,
    0.0029416048897079,
    0.0026719763415362,
    0.0020708967035154,
    0.0011603599401470,
    -0.0000000000000000,
    -0.0013149112548725,
    -0.0026597198860545,
    -0.0038906708694845,
    -0.0048585110110598,
    -0.0054242689683386,
    -0.0054757111001610,
    -0.0049427473443866,
    -0.0038100046365077,
    -0.0021249167442686,
    0.0000000000000000,
    0.0023915250143001,
    0.0048269842712816,
    0.0070518954771218,
    0.0088028256783799,
    0.0098336414102615,
    0.0099428305324617,
    0.0089992722326031,
    0.0069637718475148,
    0.0039038822764757,
    -0.0000000000000000,
    -0.0044585796957301,
    -0.0090880926482690,
    -0.0134346962700486,
    -0.0170073191983843,
    -0.0193165798559884,
    -0.0199166735305692,
    -0.0184466738048939,
    -0.0146675521740148,
    -0.0084914165444563,
    0.0000000000000000,
    0.0105497419401663,
    0.0227340119781362,
    0.0359844238881347,
    0.0496228004793832,
    0.0629060521291882,
    0.0750777255961289,
    0.0854221506501576,
    0.0933168001531859,
    0.0982785522408229,
    0.1000000000000000,
    0.0982785522408229,
    0.0933168001531859,
    0.0854221506501576,
    0.0750777255961289,
    0.0629060521291882,
    0.0496228004793832,
    0.0359844238881347,
    0.0227340119781362,
    0.0105497419401663,
    0.0000000000000000,
    -0.0084914165444563,
    -0.0146675521740148,
    -0.0184466738048939,
    -0.0199166735305692,
    -0.0193165798559884,
    -0.0170073191983843,
    -0.0134346962700486,
    -0.0090880926482690,
    -0.0044585796957301,
    -0.0000000000000000,
    0.0039038822764757,
    0.0069637718475148,
    0.0089992722326031,
    0.0099428305324617,
    0.0098336414102615,
    0.0088028256783799,
    0.0070518954771218,
    0.0048269842712816,
    0.0023915250143001,
    0.0000000000000000,
    -0.0021249167442686,
    -0.0038100046365077,
    -0.0049427473443866,
    -0.0054757111001610,
    -0.0054242689683386,
    -0.0048585110110598,
    -0.0038906708694845,
    -0.0026597198860545,
    -0.0013149112548725,
    -0.0000000000000000,
    0.0011603599401470,
    0.0020708967035154,
    0.0026719763415362,
    0.0029416048897079,
    0.0028934041068590,
    0.0025711800935818,
    0.0020409960801970,
    0.0013818309223325,
    0.0006759457825454,
    0.0000000000000000,
    -0.0005822273129838,
    -0.0010249119463935,
    -0.0013027556276180,
    -0.0014110552136596,
    -0.0013635438839528,
    -0.0011884933789757,
    -0.0009237061350181,
    -0.0006110820215192,
    -0.0002914178875877,
    -0.0000000000000000,
]);

// FIR filter approximating the frequency response of the "Shaping" preemphasis
// filter described in the P25 standard.
impl_fir!(PreemphFir, f32, 39, [
    -0.0178961626433530,
    0.0346928432330632,
    0.0163584472672260,
    -0.0063501390283224,
    -0.0344309411843599,
    -0.0521852145631016,
    -0.0398168317034308,
    0.0098706634384552,
    0.0798024315844839,
    0.1310503794999127,
    0.1214473883896009,
    0.0321842498422649,
    -0.1129971268725311,
    -0.2499342309996987,
    -0.3007279489902446,
    -0.2137087398356056,
    0.0042796502053343,
    0.2825258492739728,
    0.5139813439472742,
    0.6037091782781188,
    0.5139813439472742,
    0.2825258492739728,
    0.0042796502053343,
    -0.2137087398356056,
    -0.3007279489902446,
    -0.2499342309996987,
    -0.1129971268725311,
    0.0321842498422649,
    0.1214473883896009,
    0.1310503794999127,
    0.0798024315844839,
    0.0098706634384552,
    -0.0398168317034308,
    -0.0521852145631016,
    -0.0344309411843599,
    -0.0063501390283224,
    0.0163584472672260,
    0.0346928432330632,
    -0.0178961626433530,
]);

// Lowpass FIR filter with passband to 4kHz and stopband after 24kHz for
// antialiasing when decimating from 240kHz to 48kHz sample rate.
impl_fir!(DecimFir, Complex32, 41, [
    0.000786541581019716,
    0.000597016981378991,
    0.000396862662678544,
    -0.000312286956152667,
    -0.00166769592339678,
    -0.00367323842681146,
    -0.00612849896166191,
    -0.00858650211747868,
    -0.0103599224843132,
    -0.0105876333643936,
    -0.00836071390781038,
    -0.00289204324393627,
    0.00629992821358875,
    0.0192310344426561,
    0.0353531802318487,
    0.0535477267455005,
    0.0722237127257514,
    0.0895129918243054,
    0.103533141182812,
    0.112672819907219,
    0.115846929358967,
    0.112672819907219,
    0.103533141182812,
    0.0895129918243054,
    0.0722237127257514,
    0.0535477267455005,
    0.0353531802318487,
    0.0192310344426561,
    0.00629992821358875,
    -0.00289204324393627,
    -0.00836071390781038,
    -0.0105876333643936,
    -0.0103599224843132,
    -0.00858650211747868,
    -0.00612849896166191,
    -0.00367323842681146,
    -0.00166769592339678,
    -0.000312286956152667,
    0.000396862662678544,
    0.000597016981378991,
    0.000786541581019716,
]);

// Lowpass FIR filter with stopband after 5kHz for rejecting spectrum outside
// 6.25kHz P25 sidebands.
impl_fir!(BandpassFir, Complex32, 65, [
    -0.000688950539173326,
    -0.000271272708869335,
    0.000360610486496777,
    0.000982229947723125,
    0.00126258086094049,
    0.000879470070335683,
    -0.000251645052501297,
    -0.00176481589070489,
    -0.00284708653574881,
    -0.00258154720629305,
    -0.000537006495848382,
    0.00272051621608791,
    0.0055936018481377,
    0.00610551227396441,
    0.00304611596800325,
    -0.00297780164199895,
    -0.00930083227883992,
    -0.0121736606000597,
    -0.00871362455700719,
    0.00107827649329878,
    0.0134262594309668,
    0.0218473806302866,
    0.0200843720207548,
    0.0057377345707986,
    -0.0172087222758799,
    -0.0385517429310583,
    -0.0451998075491961,
    -0.0266194559311084,
    0.0198689089240754,
    0.0864477969745126,
    0.156350862018909,
    0.209347422214367,
    0.229096642489257,
    0.209347422214367,
    0.156350862018909,
    0.0864477969745126,
    0.0198689089240754,
    -0.0266194559311084,
    -0.0451998075491961,
    -0.0385517429310583,
    -0.0172087222758799,
    0.0057377345707986,
    0.0200843720207548,
    0.0218473806302866,
    0.0134262594309668,
    0.00107827649329878,
    -0.00871362455700719,
    -0.0121736606000597,
    -0.00930083227883992,
    -0.00297780164199895,
    0.00304611596800325,
    0.00610551227396441,
    0.0055936018481377,
    0.00272051621608791,
    -0.000537006495848382,
    -0.00258154720629305,
    -0.00284708653574881,
    -0.00176481589070489,
    -0.000251645052501297,
    0.000879470070335683,
    0.00126258086094049,
    0.000982229947723125,
    0.000360610486496777,
    -0.000271272708869335,
    -0.000688950539173326,
]);

#[cfg(test)]
mod test {
    use super::*;
    use static_fir::FIRCoefs;

    #[test]
    fn verify_symmetry() {
        RaisedCosineFir::verify_symmetry();
        PreemphFir::verify_symmetry();
        DecimFir::verify_symmetry();
        BandpassFir::verify_symmetry();
    }
}
